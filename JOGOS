#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h> // Para usar strcpy()
#include <windows.h>
#include <locale.h>


int jogo=0;
int jogo1();
int jogo2();
int jogo3();




int main(){
	
	

	setlocale(LC_ALL, "portuguese");
	while(1){
	system("cls");	
	
	if (jogo == 0) {
            system("cls");
            printf(" **MENU PRINCIPAL***\n");
            printf("\n1 - $$$SHOW DO MILHÃO$$$\n\n");
            printf("2 - Cobra na caixa!\n\n");
            printf("3 - Gousmas War\n\n");
            printf("\nEscolha Um Jogo: ");
            scanf(" %d", &jogo);
            if (jogo < 1 || jogo > 3) {
                system("cls");
                printf("\n\n** INVALIDO**\n\n");
                Sleep(500);
                fflush(stdin);
			}
        }
	
	
	
	switch(jogo){
			
		
	case 1:
		
		jogo1();
		
		break;
	case 2:
		
		jogo2();
		
		break;
	
	case 3:
	
		jogo3();
			
		break;
	
	}
	
	
	}
	
}


//JOGO 1
int jogo1(){
	






    int c = 0, b = 0;
    char a = '1';
    char texto[] = " No jogo 'Perguntas e Respostas', serao 5 Perguntas com \n4 alternativas cada. Nele veremos assuntos relacionados... ";
    char perg1[] = "VALENDO R$1000\n Qual destas substâncias faz\n parte da composição do vidro?";
    char perg2[] = "VALENDO R$10000\n  Em que ordem surgiram os modelos atômicos?";
    char perg3[] = "VALENDO R$100000\n Qual a velocidade da luz?";
    char perg4[] = "VALENDO R$500000\n Como é a conjugação do verbo caber na\n 1.ª pessoa do singular\n do presente do indicativo?";
    char perg5[] = "VALENDO R$1000000\n A todo instante, raios cósmicos atingem a atmosfera terrestre\n e colidem com núcleos atômicos.\n";
    char perg5_1[] = "Dessas interações, é formada uma cascata de partículas que permeia nossa atmosfera. Muitas dessas\n";
    char perg5_2[] = "partículas são instáveis,\n o que significa que, após determinado intervalo de tempo (tempo de vida), elas\n";
    char perg5_3[] = "decaem. Seja um múon criado a uma altitude de 100 km\n e que se movimenta com uma velocidade vertical\n";
    char perg5_4[] = "em direçãao ao solo de 0,9999c.\n Sabendo que seu tempo de vida, em repouso, é de 2,2 µs,\n a mínima altitude que essa partícula atinge,\n";
    char perg5_5[] = "aproximadamente, é de:";
              
    do{ 
        

        if (a == '1') {
            system("cls");
            printf("$$$SHOW DO MILHÃO$$$\n");
            printf("\n [1 PLAY   ]");
            printf("\n [2 REGRAS ]");
            printf("\n [3 Voltar ]");
            printf("\nEscolha Uma Opcão: ");
            scanf(" %c", &a);

            if (a < '1' || a > '3') {
                system("cls");
                printf("Invalido");
                Sleep(200);
                a = '1';
                c = 1;
            } else if (a == '1') {
                b = 1;
            } else if (a == '2') {
                c = 1;
            } else if (a == '3') {
            	jogo = 0;
            	a=0;
                c = 0;
                Beep(500, 50);
            }
        }

        if (b == 1) {
            char p = 'z';
            system("cls");

            for (int q = 0; perg1[q] != '\0'; q++) {
                putchar(perg1[q]);
                for (int j = 0; j < 100000; j++);
            }

            printf("\n A) Areia");
            Beep(700, 50);
            Sleep(200);
            printf("\n--------------------------\n");
            printf("\n B) Petróleo\n");
            Beep(700, 50);
            Sleep(200);
            printf("\n--------------------------\n");
            printf("\n C) Celulose\n");
            Beep(700, 50);
            Sleep(200);
            printf("\n--------------------------\n");
            printf("\n D) Fibra\n");
            Beep(700, 50);

            printf("\n\nEscolha a Alternativa: ");
            scanf(" %c", &p);
            Sleep(350);

            if ((p == 'b' || p == 'B') || (p == 'c' || p == 'C') || (p == 'd' || p == 'D')) {
                system ("color 4F");
				system("cls");
                printf("\n X Alternativa Errada X\n");
                
                printf("\n 1 - Continuar \n");
                printf("2 - Voltar Menu \n");
                scanf(" %c", &a);
                system ("color 07");
            } else if (p == 'a' || p == 'A') {
                system("color AF");
				system("cls");
                printf("\n CORRETO \n");
                
                printf("\n 1- Continuar \n");
                scanf(" %c", &a);
                 system ("color 07");
            }

            if (a == '1') {
                a = '0';  // Resetar escolha
                b = 2;
            }
            if (a == '2') {
                a = '0';  // Resetar escolha
                c = 2;
            }
        }

        if (b == 2) {
            char p = 'z';
            system("cls");

            for (int q = 0; perg2[q] != '\0'; q++) {
                putchar(perg2[q]);
                for (int j = 0; j < 100000; j++);
            }

            printf("\n A) Thomson, Dalton, Rutherford, Rutherford-Bohr \n");
            Beep(700, 50);
            Sleep(200);
            printf("\n B) Rutherford-Bohr, Rutherford, Thomson, Dalton\n");
            Beep(700, 50);
            Sleep(200);
            printf("\n C) Dalton, Rutherford-Bohr, Thomson, Rutherford\n");
            Beep(700, 50);
            Sleep(200);
            printf("\n D) Dalton, Thomson, Rutherford, Rutherford-Bohr\n");

            printf("\n\nEscolha a alternativa: ");
            scanf(" %c", &p);
            Sleep(350);

            if ((p == 'a' || p == 'A') || (p == 'b' || p == 'B') || (p == 'c' || p == 'C')) {
                system ("color 4F");
				system("cls");
                printf("\n X Alternativa Errada X\n");
                
                printf("\n 1 - Continuar \n");
                printf("2 - Voltar Menu \n");
                scanf(" %c", &a);
                 system ("color 07");
                
            } else if (p == 'd' || p == 'D') {
                system("color AF");
			    system("cls");
                printf("\n CORRETO \n");
                
                printf("\n 1- Continuar \n");
                scanf(" %c", &a);
                 system ("color 07");
            }

            if (a == '1') {
                a = '0';  // Resetar escolha
                b = 3;
            }
            if (a == '2') {
                a = '0';  // Resetar escolha
                c = 2;
            }
        }

        if (b == 3) {
            char p = 'z';
            system("cls");

            for (int q = 0; perg3[q] != '\0'; q++) {
                putchar(perg3[q]);
                for (int j = 0; j < 100000; j++);
            }
            printf("\n A) 299 792 458 metros por segundo (m/s)\n");
            Beep(700, 50);
            Sleep(200);
            printf("\n B) 199 792 458 metros por segundo (m/s)\n");
            Beep(700, 50);
            Sleep(200);
            printf("\n C) 150 000 000 metros por segundo (m/s)\n");
            Beep(700, 50);
            Sleep(200);
            printf("\n D) 300 000 000 metros por segundo (m/s)\n");

            printf("\n\nEscolha a alternativa: ");
            scanf(" %c", &p);
            Sleep(350);
            if ((p == 'b' || p == 'B') || (p == 'c' || p == 'C') || (p == 'd' || p == 'D')) {
                system ("color 4F"); 
				system("cls");
                printf("\n X Alternativa Errada X\n");
                
                printf("\n 1 - Continuar \n");
                printf("2 - Voltar Menu \n");
                scanf(" %c", &a);
                system ("color 07");
                
            } else if (p == 'a' || p == 'A') {
                system("color AF");
				system("cls");
                printf("\n CORRETO \n");
                
                printf("\n 1- Continuar \n");
                scanf(" %c", &a);
                system ("color 07");
            }

            if (a == '1') {
                a = '0';  // Resetar escolha
                b = 4;
            }
            if (a == '2') {
                a = '0';  // Resetar escolha
                c = 2;
            }
        }

        if (b == 4) {
            char p = 'z';
            system("cls");

            for (int q = 0; perg4[q] != '\0'; q++) {
                putchar(perg4[q]);
                for (int j = 0; j < 100000; j++);
            }
            printf("\n A) Ele cabe\n");
            Beep(700, 50);
            Sleep(200);
            printf("\n B) Eu caibo\n");
            Beep(700, 50);
            Sleep(200);
            printf("\n C) Que eu caiba \n");
            Beep(700, 50);
            Sleep(200);
            printf("\n D) Eu cabo \n");

            printf("\n\nEscolha a alternativa: ");
            scanf(" %c", &p);
            Sleep(350);

            if ((p == 'a' || p == 'A') || (p == 'c' || p == 'C') || (p == 'd' || p == 'D')) {
                system ("color 4F");
			    system("cls");
                printf("\n X Alternativa Errada X\n");
                
                printf("\n 1 - Continuar \n");
                printf("2 - Voltar Menu \n");
                scanf(" %c", &a);
                system ("color 07");
                
            } else if (p == 'b' || p == 'B') {
                system("color AF");
				system("cls");
                printf("\n CORRETO \n");
                
                printf("\n 1- Continuar \n");
                scanf(" %c", &a);
                system ("color 07");
            }

            if (a == '1') {
                a = '0';  // Resetar escolha
                b = 5;
            }
            if (a == '2') {
                a = '0';  // Resetar escolha
                c = 2;
            }
        }

        if (b == 5) {
            char p = 'z';
            system("cls");

            for (int q = 0; perg5[q] != '\0'; q++) {
                putchar(perg5[q]);
                for (int j = 0; j < 100000; j++);
            }
            for (int q = 0; perg5_1[q] != '\0'; q++) {
                putchar(perg5_1[q]);
                for (int j = 0; j < 100000; j++);
            }
            for (int q = 0; perg5_2[q] != '\0'; q++) {
                putchar(perg5_2[q]);
                for (int j = 0; j < 100000; j++);
            }
            for (int q = 0; perg5_3[q] != '\0'; q++) {
                putchar(perg5_3[q]);
                for (int j = 0; j < 100000; j++);
            }
            for (int q = 0; perg5_4[q] != '\0'; q++) {
                putchar(perg5_4[q]);
                for (int j = 0; j < 100000; j++);
            }
	        for (int q = 0; perg5_5[q] != '\0'; q++) {
                putchar(perg5_5[q]);
                for (int j = 0; j < 100000; j++);
            }
            printf("\n A) 46 KM \n");
            Beep(700, 50);
            Sleep(200);
            printf("\n B) 99 KM \n");
            Beep(700, 50);
            Sleep(200);
            printf("\n C) 53 KM  \n");
            Beep(700, 50);
            Sleep(200);
            printf("\n D) 0 KM \n");

            printf("\n\nEscolha a alternativa: ");
            scanf(" %c", &p);
            Sleep(350);

            if ((p == 'a' || p == 'A') || (p == 'b' || p == 'B') || (p == 'd' || p == 'D')) {
                system ("color 4F");
			    system("cls");
                printf("\n X Alternativa Errada X\n");
                
                printf("\n\n |    1 - Voltar     |\n");
                printf(" | 2 - Menu Principal| \n");
                printf("\n Escolha Uma Opcão: ");
                scanf(" %c", &a);
                system ("color 07");
                
            } else if (p == 'c' || p == 'C') {
                system("color AF");
			    system("cls");
                printf("\n CORRETO \n");
                
                printf("\n\n |    1 - Voltar     |\n");
                printf(" | 2 - Menu Principal| \n");
                printf("\n Escolha Uma Opcão: ");
                scanf(" %c", &a);
                system ("color 07"); 
            }
            if (a < '1' || a > '2') {
                system("cls");
                printf("Invalido");
                Sleep(500);
                a = '2';
                c = 1;
            } else if (a == '1') {
                b = '5';
            } else if (a == '2') {
                a = 0;  // Resetar escolha
                c = 1;
            }
		}
         if (a == '2') {
            system("cls");
            printf("\n REGRAS \n\n");
            for (int i = 0; texto[i] != '\0'; i++) {
                Beep(400, 10);
                putchar(texto[i]);
                for (int j = 0; j < 5000000; j++);
            }
		 
            printf("\n\n |    1 - Voltar     |\n");
            printf(" | 2 - Menu Principal| \n");

            printf("\n Escolha Uma Opcão: ");
            scanf(" %c", &a);
		    
            if (a < '1' || a > '2') {
                system("cls");
                printf("Invalido");
                Sleep(500);
                a = '2';
                c = 1;
            } else if (a == '1') {
                a = '1';
            } else if (a == '2') {
                a = 0;  
                c = 1;
            }
		 }

       
    } while (c >= 1 && c <= 2);
	


	
	
}	
//JOGO 1	
	



int jogo2(){

	setlocale(LC_ALL, "portuguese");
    srand(time(NULL));  // Inicializa o gerador de números aleatórios
 	
 	int escolha;
    system("cls");
    printf("Escolha um jogo:\n");
    printf("1 - Cobra na Caixa\n");
    printf("2 - Voltar\n");
    printf("Digite sua escolha: ");
    scanf("%d", &escolha);

	
	
	
	
	while(1){
		
	char jogarNovamente;
	
	if(escolha == 2){
		
		printf("%d", jogo);
		jogo = 0;   	
			
	}
	
		
    switch (escolha) {
        case 1:
            
            	system("cls");
    const char* nomes[7] = {
        "Erick", "Alesandra", "Girotto", "Polyana", "Luiz", "Eliani", "kleber"
    };
    char jogador1[20], jogador2[20];
    int escolha, caixaEscolhida;
    int posicaoCobra, posicaoBotao;
    

    // Sortear quem começa
    printf("Escolha o nome do Jogador 1 (de 1 a 7): \n\n");
    for (int i = 0; i < 7; i++) {
        printf("%d - %s\n", i + 1, nomes[i]);
    }
    scanf("%d", &escolha);
    strcpy(jogador1, nomes[escolha - 1]);
	system("cls");
    printf("Escolha o nome do Jogador 2 (de 1 a 7): \n\n");
    for (int i = 0; i < 7; i++) {
        printf("%d - %s\n", i + 1, nomes[i]);
    }
    scanf("%d", &escolha);
    strcpy(jogador2, nomes[escolha - 1]);
    system("cls");
    printf("Jogo iniciado! %s começa primeiro!\n", jogador1);

    do {
        posicaoCobra = rand() % 5;  // Posiciona a cobra aleatoriamente
        posicaoBotao = rand() % 5;  // Posiciona o botão aleatoriamente
        while (posicaoCobra == posicaoBotao) {  // Se cobra e botão estiverem na mesma caixa
            posicaoBotao = rand() % 5;
        }

        printf("%s, escolha uma caixa (0-4): ", jogador1);
        scanf("%d", &caixaEscolhida);
        if (caixaEscolhida == posicaoCobra) {
        	system("cls");
            printf("Você encontrou a cobra, %s! Você perdeu!\n", jogador1);
            break;
        } else if (caixaEscolhida == posicaoBotao) {
        	system("cls");
            printf("Você encontrou o botão! Você venceu, %s!\n", jogador1);
            break;
        } else {
        	system("cls");
            printf("A caixa está vazia, %s. Próxima rodada.\n", jogador1);
        }

        // Troca para o segundo jogador
        printf("%s, escolha uma caixa (0-4): ", jogador2);
        scanf("%d", &caixaEscolhida);
        if (caixaEscolhida == posicaoCobra) {
        	system("cls");
            printf("Você encontrou a cobra, %s! Você perdeu!\n", jogador2);
            break;
        } else if (caixaEscolhida == posicaoBotao) {
        	system("cls");
            printf("Você encontrou o botão! Você venceu, %s!\n", jogador2);
            break;
        } else {
        	system("cls");
            printf("A caixa está vazia, %s. Próxima rodada.\n", jogador2);
        }

    } while (1);
	
	while(1){
    printf("Deseja jogar novamente? (S - Sim, N - Não): ");
    scanf(" %c", &jogarNovamente);  // O espaço antes de %c é para consumir o '\n' deixado pelo scanf
    if (jogarNovamente == 'S' || jogarNovamente == 's') {
		break;
		
    } else if (jogarNovamente == 'N' || jogarNovamente == 'n' || jogo == 0){
		break;
    }else{

    	system("cls");
		printf("INVALIDO");
		Sleep(200);
		
	}
	}        
            
            break;    

        
    }
    
    if(jogarNovamente == 'N' || jogarNovamente == 'n' || jogo == 0){
		break;
		
	}
    
	}
	
}

#define MAX_FURIA 5

struct Gousma {
    int furia; 
};

void inicializarJogador(struct Gousma gousmas[2]) {
    int i;
    for (i = 0; i < 2; i++) {
        gousmas[i].furia = 1; 
    }
}

void imprimirStatusJogador(struct Gousma gousmas[2]) {
    int i;
    printf("Status das Gousmas:\n");
    for (i = 0; i < 2; i++) {
        if (gousmas[i].furia > 0) {
            printf("Gousma %d - Fúria: %d\n", i + 1, gousmas[i].furia);
        }
    }
}

void atacar(struct Gousma atacante[2], struct Gousma defensor[2], int atacanteIdx, int defensorIdx) {
    defensor[defensorIdx].furia += atacante[atacanteIdx].furia; 

    )
    atacante[atacanteIdx].furia = 0;

    if (defensor[defensorIdx].furia > MAX_FURIA) {
        printf("A Gousma %d se desintegrou!\n", defensorIdx + 1);
        defensor[defensorIdx].furia = 0;
    }
}

void dividirGousma(struct Gousma gousmas[2], int gousmaIdx, int novaFuria) {
    if (novaFuria >= gousmas[gousmaIdx].furia) {
        printf("Não é possível dividir dessa forma, a fúria nova precisa ser menor!\n");
        return;
    }

    
    if (gousmas[1].furia == 0) { 
        gousmas[1].furia = novaFuria;
        gousmas[gousmaIdx].furia -= novaFuria;
        printf("Gousma %d foi dividida!\n", gousmaIdx + 1);
    } else {
        printf("Você já tem duas Gousmas, não pode dividir mais!\n");
    }
}


int verificarDerrota(struct Gousma gousmas[2]) {
    int i;
    for (i = 0; i < 2; i++) {
        if (gousmas[i].furia > 0) {
            return 0; 
        }
    }
    return 1;
}


void reiniciarJogo(struct Gousma gousmas1[2], struct Gousma gousmas2[2]) {
    inicializarJogador(gousmas1);
    inicializarJogador(gousmas2);
}


int jogo3(){

setlocale(LC_ALL, "portuguese");
    struct Gousma jogador1[2], jogador2[2];
    int jogadorAtivo = 1;
    int opcao, ataqueIdx, alvoIdx, dividirIdx, novaFuria;
    char continuar;

    inicializarJogador(jogador1);
    inicializarJogador(jogador2);

    while (1) {
        system("cls");
        printf("\nVez do Jogador %d\n", jogadorAtivo);
        
        if (jogadorAtivo == 1) {
            imprimirStatusJogador(jogador1);
        } else {
            imprimirStatusJogador(jogador2);
        }

        printf("\nEscolha uma ação:\n");
        printf("1. Atacar\n");
        printf("2. Dividir Gousma\n");
        printf("3. Verificar status\n");
        printf("4. Sair\n");
        printf("Opção: ");
        scanf("%d", &opcao);

        if (opcao == 1) {
            printf("Escolha a Gousma para atacar (0 ou 1): ");
            scanf("%d", &ataqueIdx);
            printf("Escolha a Gousma alvo (0 ou 1): ");
            scanf("%d", &alvoIdx);

            if (jogadorAtivo == 1) {
                atacar(jogador1, jogador2, ataqueIdx, alvoIdx);
            } else {
                atacar(jogador2, jogador1, ataqueIdx, alvoIdx);
            }

            if (verificarDerrota(jogador1)) {
                printf("Jogador 1 perdeu!\n");
                break;
            }
            if (verificarDerrota(jogador2)) {
                printf("Jogador 2 perdeu!\n");
                break;
            }
        } else if (opcao == 2) {
            printf("Escolha a Gousma para dividir (0 ou 1): ");
            scanf("%d", &dividirIdx);
            printf("Informe a quantidade de fúria para dividir: ");
            scanf("%d", &novaFuria);

            if (jogadorAtivo == 1) {
                dividirGousma(jogador1, dividirIdx, novaFuria);
            } else {
                dividirGousma(jogador2, dividirIdx, novaFuria);
            }
        } else if (opcao == 3) {
            if (jogadorAtivo == 1) {
                imprimirStatusJogador(jogador1);
            } else {
                imprimirStatusJogador(jogador2);
            }
        } else if (opcao == 4) {
            printf("Deseja fechar o jogo? (S/N): ");
            scanf(" %c", &continuar);
            if (continuar == 'N' || continuar == 'n') {
                reiniciarJogo(jogador1, jogador2);
            } else {
                printf("Saindo do jogo...\n");
                jogo = 0;
                break;
            }
        }

        jogadorAtivo = (jogadorAtivo == 1) ? 2 : 1;
    }
	
	
		
}


